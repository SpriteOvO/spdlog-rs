name: CI

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'

  pull_request:
    paths-ignore:
      - '**.md'
      - 'LICENSE'

  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  # When updating this, also update:
  # - src/lib.rs
  # - Cargo.toml
  # - README.md
  rust_minver: 1.56.0

jobs:
  format:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust nightly
      run: |
        rustup toolchain install nightly
        rustup component add rustfmt --toolchain nightly
    - name: Restore cargo caches
      uses: Swatinem/rust-cache@v1
    - name: Check formatting
      run: cargo +nightly fmt --all --verbose -- --check

  test:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        fn_features: ['', 'log native libsystemd multi-thread']
        cfg_feature: ['', 'flexible-string', 'source-location']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo bash ./.github/workflows/install-deps.sh
    - name: Restore cargo caches
      uses: Swatinem/rust-cache@v1
    - name: Run tests
      run: cargo test --features "${{ env.fn_features }} ${{ matrix.cfg_feature }}" --verbose

  clippy:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo bash ./.github/workflows/install-deps.sh
    - name: Install Rust nightly
      run: |
        rustup toolchain install nightly
        rustup component add clippy --toolchain nightly
    - name: Restore cargo caches
      uses: Swatinem/rust-cache@v1
    - name: Run clippy 
      run: cargo clippy --all-features --tests --examples -- -D warnings
    - name: Run clippy nightly for benches
      run: cargo +nightly clippy --all-features --benches

  check:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        target: ['', 'x86_64-apple-ios']
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo bash ./.github/workflows/install-deps.sh
    - name: Install Rust target
      if: matrix.target != ''
      run: rustup target add ${{ matrix.target }}
    - name: Restore cargo caches
      uses: Swatinem/rust-cache@v1
    - name: Run check
      run: |
        if [[ -z "${{ matrix.target }}" ]]; then
          cargo check --all-features
        else
          cargo check --all-features --target ${{ matrix.target }}
        fi

  check-doc:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install dependencies
      run: sudo bash ./.github/workflows/install-deps.sh
    - name: Install Rust nightly
      run: rustup toolchain install nightly
    - name: Restore cargo caches
      uses: Swatinem/rust-cache@v1
    - name: Run rustdoc
      run: |
        cd spdlog
        cargo +nightly rustdoc --all-features --verbose -- -D warnings
        cd ../spdlog-macros
        cargo +nightly rustdoc --all-features --verbose -- -D warnings

  check-msrv:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo bash ./.github/workflows/install-deps.sh
    - name: Install Rust nightly
      run: rustup toolchain install nightly
    - name: Install Rust ${{ env.rust_minver }}
      run: rustup toolchain install ${{ env.rust_minver }}
    - name: Restore cargo caches
      uses: Swatinem/rust-cache@v1
    - name: Avoid dev-dependencies
      run: |
        # Some dev-dependencies require a newer version of Rust, but it doesn't matter for MSRV check
        # This is a workaround for the cargo nightly option `-Z avoid-dev-deps`
        perl -pi -e 's/\[dev-dependencies]/[workaround-avoid-dev-deps]/g' ./spdlog/Cargo.toml
    - name: Downgrade dependencies to minimal versions
      run: cargo +nightly update -Z minimal-versions
    - name: Check MSRV for core with Rust ${{ env.rust_minver }}
      run: cargo +${{ env.rust_minver }} check --locked --all-features --verbose
